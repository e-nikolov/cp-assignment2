Can some precedences have no storage?
2 steps without a storage in between?

If a storage is full with product 1, and a processing step before it produces product 2, but the
following processing step can immediately consume product 2, is it allowed to send the product 
to the following step without having to store product 2, or replace product 1.
presenceOf(interval) == lengthOf(interval) > 0

What does this mean:
You have no alternative constraint for setup intervals?

Setup intervals need to end at the start of the following step

How do we connect setupResources[] to setupDemandStepAlternative[]

should the state function's alwaysEqual be aligned on left and right 

how do we do initial products on storages

the setup matrix might not contain all pairs, we need to set those transitions to 0 by default

What happens if the setup matrix contains a non-zero transition time between 2 products of the same type?
Do we still allow the tank to contain 2 different demands of the same product type?




StorageStep must happen only if its duration is more than zero


Setup of storage must happen only if the previous product in it was different


between 2 consecutive steps, there must be minDelay time

														Instance0:			
cp.param.DefaultInferenceLevel = "Medium";				4187.5



It appears that all the constraints directly on the intervals themselves are making performance worse.
Big impact form 

dvar interval storageAfterProdStep[<dem,st> in DemSteps]
    optional
    in 0..dem.deliveryMax
    size item(minMaxStepStorageTime[st.stepId], <st.stepId>).minTime 
         .. 
         minl(item(minMaxStepStorageTime[st.stepId], <st.stepId>).maxTime, maxDemandStoreTime[dem]);
 
Instance 1 drops to 3.3k if we remove 0..dem.deliveryMax

Is this still correct?












 Constraint variants


    forall(<dem,st> in DemSteps : st.stepId in endingStepsIDs) {
        endOf(prodSteps[<dem,st>], dem.deliveryMin) >= dem.deliveryMin;
        endOf(prodSteps[<dem,st>], dem.deliveryMin) <= dem.deliveryMax;
    }

    Instance1 -  4 938.5
    Instance2 - 11 078


    forall(<dem,st> in DemSteps) {
        endOf(prodSteps[<dem,st>], dem.deliveryMin) >= dem.deliveryMin;
        endOf(prodSteps[<dem,st>], dem.deliveryMin) <= dem.deliveryMax;
    }

    Instance0 - 3 223.5
    Instance1 - No solution






Good results

Instance0 1442.67
Instance1 3686.50
Instance2 12094
Instance3 12033,50
Instance4 21079
